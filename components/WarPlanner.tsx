

import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';
import { db } from '../firebaseConfig';
import { collection, query, orderBy, onSnapshot, doc, addDoc, updateDoc, deleteDoc, serverTimestamp, where, writeBatch, Timestamp, CollectionReference, DocumentData, DocumentSnapshot } from 'firebase/firestore';
// fix: Import User type to resolve "Cannot find name 'User'" error.
import { User } from 'firebase/auth';
import { WarGoal, Mission, ColorGroup, Subtask, WorkType, TeamMember, Principle, Contact, HistoryEntry, GoalDocument, GoalTransaction, GoalContact, Currency, TransactionType } from '../types';
import { ChevronLeftIcon, TrashIcon, XIcon, SettingsIcon, PlusIcon, EditIcon, PlusCircleIcon, FolderIcon, FolderPlusIcon, BriefcaseIcon, LightBulbIcon, DocumentTextIcon, UsersIcon, CalendarDaysIcon, ScaleIcon, RocketLaunchIcon, BullseyeIcon, HeartIcon, SparklesIcon, ExclamationTriangleIcon, UserPlusIcon, ExternalLinkIcon, DocumentDuplicateIcon, BanknotesIcon, UserCircleIcon, ChevronRightIcon } from './Icons';
import { useAppStore } from '../store';

type WarCatalog = ColorGroup;
type CalendarView = 'month' | 'quarter' | 'year';

// --- MAIN COMPONENT ---
const WarPlanner: React.FC = () => {
    const { user, setCurrentView } = useAppStore();
    const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
    const [goals, setGoals] = useState<WarGoal[]>([]);
    const [missions, setMissions] = useState<Mission[]>([]);
    const [catalogs, setCatalogs] = useState<WarCatalog[]>([]);
    const [workTypes, setWorkTypes] = useState<WorkType[]>([]);
    const [selectedGoalId, setSelectedGoalId] = useState<string | null>(null);
    const [activeModal, setActiveModal] = useState<'catalogs' | 'workTypes' | 'people' | null>(null);

    const goalsCollection = useMemo(() => user ? collection(db, 'users', user.uid, 'warGoals') : null, [user]);
    const missionsCollection = useMemo(() => user ? collection(db, 'users', user.uid, 'warMissions') : null, [user]);
    const catalogsCollection = useMemo(() => user ? collection(db, 'users', user.uid, 'warCatalogs') : null, [user]);
    const workTypesCollection = useMemo(() => user ? collection(db, 'users', user.uid, 'workTypes') : null, [user]);
    
    useEffect(() => { if(!goalsCollection) return; const q = query(goalsCollection, where('year', '==', currentYear), orderBy('createdAt', 'asc')); const unsub = onSnapshot(q, snapshot => setGoals(snapshot.docs.map(doc => processFirestoreData<WarGoal>(doc)))); return unsub; }, [goalsCollection, currentYear]);
    useEffect(() => { if(!missionsCollection) return; const q = query(missionsCollection, where('year', '==', currentYear)); const unsub = onSnapshot(q, snapshot => setMissions(snapshot.docs.map(doc => processFirestoreData<Mission>(doc)))); return unsub; }, [missionsCollection, currentYear]);
    useEffect(() => { if(!catalogsCollection) return; const q = query(catalogsCollection, orderBy('createdAt', 'asc')); const unsub = onSnapshot(q, snapshot => setCatalogs(snapshot.docs.map(d => processFirestoreData<WarCatalog>(d)))); return unsub; }, [catalogsCollection]);
    useEffect(() => { if(!workTypesCollection) return; const q = query(workTypesCollection, orderBy('createdAt', 'asc')); const unsub = onSnapshot(q, snapshot => setWorkTypes(snapshot.docs.map(d => processFirestoreData<WorkType>(d)))); return unsub; }, [workTypesCollection]);

    const handleUpdateGoal = async (id: string, data: Partial<WarGoal>) => { if(goalsCollection) await updateDoc(doc(goalsCollection, id), data) };
    const handleCreateGoal = async () => { if(!goalsCollection) return; const newGoalData = { title: 'New Goal', description: '', year: currentYear, catalogId: null, subtasks: [], createdAt: serverTimestamp() }; const docRef = await addDoc(goalsCollection, newGoalData); setSelectedGoalId(docRef.id); };

    const groupedGoals = useMemo(() => {
        const catalogGroups = catalogs.map(catalog => ({...catalog, goals: goals.filter(g => g.catalogId === catalog.id)})).filter(g => g.goals.length > 0);
        const uncategorized = goals.filter(g => !g.catalogId || !catalogs.some(c => c.id === g.catalogId));
        if(uncategorized.length > 0) catalogGroups.push({ id: 'uncategorized', name: 'Uncategorized', color: 'bg-slate-400', createdAt: '', goals: uncategorized });
        return catalogGroups;
    }, [catalogs, goals]);

    const selectedGoal = useMemo(() => goals.find(g => g.id === selectedGoalId), [goals, selectedGoalId]);

    if (!user) return <div>Authenticating...</div>;
    
    if (selectedGoal) {
        return <GoalDetailView user={user} goal={selectedGoal} missions={missions.filter(m => m.parentId === selectedGoal.id)} catalogs={catalogs} onBack={() => setSelectedGoalId(null)} onUpdateGoal={(data) => handleUpdateGoal(selectedGoal.id, data)} />;
    }

    return (
        <div className="h-screen w-screen bg-slate-100 flex flex-col">
            <header className="h-[var(--topbar-h)] flex-shrink-0 bg-white/80 backdrop-blur-lg flex items-center justify-between px-4 sm:px-6 border-b border-slate-200">
                <div className="flex items-center gap-2">
                    <button onClick={() => setCurrentView('dashboard')} className="h-9 w-9 flex items-center justify-center rounded-lg text-slate-500 hover:bg-slate-200"><ChevronLeftIcon className="h-5 w-5"/></button>
                    <h1 className="text-xl font-bold text-slate-800">War Planner</h1>
                    <div className="flex items-center gap-2 ml-4">
                        <button onClick={() => setCurrentYear(y => y - 1)} className="h-8 w-8 rounded-md hover:bg-slate-200 flex items-center justify-center font-bold text-lg">‹</button>
                        <span className="font-bold text-lg w-12 text-center">{currentYear}</span>
                        <button onClick={() => setCurrentYear(y => y + 1)} className="h-8 w-8 rounded-md hover:bg-slate-200 flex items-center justify-center font-bold text-lg">›</button>
                    </div>
                </div>
                <div className="flex items-center gap-2">
                    <button onClick={() => setActiveModal('catalogs')} className="h-9 px-3 text-sm font-semibold bg-white border border-slate-300 rounded-lg hover:bg-slate-100">Manage Catalogs</button>
                    <button onClick={handleCreateGoal} className="h-9 px-4 flex items-center gap-2 text-sm font-semibold bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"><PlusIcon className="w-4 h-4"/> New Goal</button>
                </div>
            </header>
            <main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8 space-y-8">
                <div className="space-y-4">
                    {groupedGoals.map(group => (
                        <div key={group.id}>
                            <h3 className="font-bold text-sm text-slate-500 px-2 mb-2 uppercase tracking-wider">{group.name}</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                                {group.goals.map(goal => (
                                    <button key={goal.id} onClick={() => setSelectedGoalId(goal.id)} className="text-left p-4 bg-white border border-slate-200 rounded-xl shadow-sm hover:shadow-md hover:border-indigo-400 transition-all flex items-center gap-3">
                                        <div className={`w-3 h-3 rounded-full flex-shrink-0 ${catalogs.find(c=>c.id === goal.catalogId)?.color || 'bg-slate-400'}`}></div>
                                        <span className="font-semibold text-slate-800 truncate">{goal.title}</span>
                                    </button>
                                ))}
                            </div>
                        </div>
                    ))}
                    {goals.length === 0 && <div className="text-center py-16 text-slate-500">No goals for {currentYear}. Click 'New Goal' to start planning.</div>}
                </div>
                <GlobalYearCalendar year={currentYear} missions={missions} catalogs={catalogs} />
            </main>
            {activeModal === 'catalogs' && catalogsCollection && <CatalogSettingsModal catalogs={catalogs} collectionRef={catalogsCollection} onClose={() => setActiveModal(null)} />}
            {activeModal === 'people' && <ManagePeopleModal user={user} onClose={() => setActiveModal(null)} />}
        </div>
    );
};


// --- All sub-components (Modals, Calendars, etc.) are kept the same as in the original file ---
const processFirestoreData = <T extends { id: string }>(doc: DocumentSnapshot<DocumentData>): T => { const data = doc.data(); if (!data) return { id: doc.id } as T; const convertTimestamps = (obj: any): any => { if (obj === null || typeof obj !== 'object') return obj; if (obj.toDate && typeof obj.toDate === 'function') return obj.toDate().toISOString(); if (Array.isArray(obj)) return obj.map(item => convertTimestamps(item)); const newObj: { [key: string]: any } = {}; for (const key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = convertTimestamps(obj[key]); } } return newObj; }; return { id: doc.id, ...convertTimestamps(data) } as T; };
const CatalogSettingsModal: React.FC<{ catalogs: WarCatalog[]; collectionRef: CollectionReference<DocumentData>; onClose: () => void; }> = ({ catalogs, collectionRef, onClose }) => { const [name, setName] = useState(''); const [color, setColor] = useState('bg-slate-500'); const colors = ['bg-slate-500', 'bg-red-500', 'bg-orange-500', 'bg-amber-500', 'bg-yellow-500', 'bg-lime-500', 'bg-green-500', 'bg-emerald-500', 'bg-teal-500', 'bg-cyan-500', 'bg-sky-500', 'bg-blue-500', 'bg-indigo-500', 'bg-violet-500', 'bg-purple-500', 'bg-fuchsia-500', 'bg-pink-500', 'bg-rose-500']; const predefinedCatalogs = useMemo(() => [{ name: 'Projects', color: 'bg-sky-500' }, { name: 'Private Life', color: 'bg-emerald-500' }, { name: 'Work', color: 'bg-slate-500' }, { name: 'Health & Fitness', color: 'bg-rose-500' }], []); const existingCatalogNames = useMemo(() => catalogs.map(c => c.name.toLowerCase()), [catalogs]); const suggestedCatalogs = useMemo(() => predefinedCatalogs.filter(pc => !existingCatalogNames.includes(pc.name.toLowerCase())), [predefinedCatalogs, existingCatalogNames]); const handleAddCustom = async (e: React.FormEvent) => { e.preventDefault(); if (name.trim()) await addDoc(collectionRef, { name: name.trim(), color, createdAt: serverTimestamp() }); setName(''); }; const handleAddPredefined = async (cat: { name: string, color: string }) => await addDoc(collectionRef, { ...cat, createdAt: serverTimestamp() }); const handleDelete = async (id: string) => { if (window.confirm('Are you sure?')) await deleteDoc(doc(collectionRef, id)); }; return (<div className="fixed inset-0 bg-black/40 z-50 flex justify-center items-center p-4" onClick={onClose}><div className="bg-white w-full max-w-lg rounded-2xl shadow-lg flex flex-col" onClick={e => e.stopPropagation()}><header className="p-4 border-b border-slate-200 flex justify-between items-center"><h2 className="text-xl font-bold">Manage Catalogs</h2><button onClick={onClose} className="p-2 rounded-lg hover:bg-slate-100"><XIcon className="w-6 h-6"/></button></header><div className="p-4 max-h-[70vh] overflow-y-auto space-y-4"><div><h3 className="text-sm font-semibold text-slate-500 mb-2">Suggestions</h3><div className="flex flex-wrap gap-2">{suggestedCatalogs.map(sc => (<button key={sc.name} onClick={() => handleAddPredefined(sc)} className="flex items-center gap-2 px-3 py-1.5 bg-slate-100 hover:bg-slate-200 rounded-lg text-sm font-semibold"><span className={`w-3 h-3 rounded-full ${sc.color}`}></span>{sc.name}<PlusIcon className="w-4 h-4"/></button>))}</div></div><div><h3 className="text-sm font-semibold text-slate-500 mb-2">Active Catalogs</h3><ul className="space-y-2">{catalogs.map(c => (<li key={c.id} className="flex items-center justify-between p-2 rounded-lg hover:bg-slate-100 group"><div className="flex items-center gap-3"><span className={`w-4 h-4 rounded-full ${c.color}`}></span>{c.name}</div><button onClick={() => handleDelete(c.id)} className="text-slate-400 hover:text-red-600 opacity-0 group-hover:opacity-100"><TrashIcon className="w-4 h-4"/></button></li>))}</ul></div></div><form onSubmit={handleAddCustom} className="p-4 border-t border-slate-200 space-y-3"><div className="flex gap-2"><input type="text" value={name} onChange={e => setName(e.target.value)} placeholder="New catalog name" className="flex-grow h-10 px-3 border border-slate-300 rounded-xl" /><button type="submit" className="h-10 px-4 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700">Add</button></div><div className="flex flex-wrap gap-2 justify-center pt-2">{colors.map(c => <button key={c} type="button" onClick={() => setColor(c)} className={`w-6 h-6 rounded-full ${c} ${color === c ? 'ring-2 ring-offset-2 ring-indigo-500' : ''}`}></button>)}</div></form></div></div>); };
const ManagePeopleModal: React.FC<{ user: User; onClose: () => void; }> = ({ user, onClose }) => { const [contacts, setContacts] = useState<Contact[]>([]); const [editingContact, setEditingContact] = useState<Contact | 'new' | null>(null); const contactsCollection = useMemo(() => collection(db, 'users', user.uid, 'contacts'), [user.uid]); useEffect(() => { const q = query(contactsCollection, orderBy('createdAt', 'desc')); const unsub = onSnapshot(q, snapshot => setContacts(snapshot.docs.map(d => processFirestoreData<Contact>(d)))); return unsub; }, [contactsCollection]); const handleSave = async (data: Omit<Contact, 'id' | 'createdAt'>) => { if (editingContact && typeof editingContact === 'object') await updateDoc(doc(contactsCollection, editingContact.id), data); else await addDoc(contactsCollection, { ...data, createdAt: serverTimestamp() }); setEditingContact(null); }; const handleDelete = async (id: string) => { if (window.confirm('Are you sure?')) await deleteDoc(doc(contactsCollection, id)); }; return (<div className="fixed inset-0 bg-black/40 z-50 flex justify-center items-center p-4" onClick={onClose}><div className="bg-white w-full max-w-3xl rounded-2xl shadow-lg flex flex-col h-[80vh]" onClick={e => e.stopPropagation()}><header className="p-4 border-b flex justify-between items-center"><h2 className="text-xl font-bold">Manage People (CRM)</h2><button onClick={onClose} className="p-2 rounded-lg hover:bg-slate-100"><XIcon className="w-6 h-6"/></button></header><div className="flex-grow flex overflow-hidden"><div className="w-2/5 border-r overflow-y-auto"><div className="p-3 border-b"><button onClick={() => setEditingContact('new')} className="w-full flex items-center justify-center gap-2 h-10 px-3 bg-indigo-600 text-white rounded-lg font-semibold text-sm hover:bg-indigo-700"><PlusIcon className="w-4 h-4"/> Add New Person</button></div><ul className="divide-y">{contacts.map(c => (<li key={c.id} onClick={() => setEditingContact(c)} className={`p-3 cursor-pointer ${editingContact && typeof editingContact === 'object' && editingContact.id === c.id ? 'bg-indigo-100' : 'hover:bg-slate-100'}`}><p className="font-semibold">{c.name}</p><p className="text-sm text-slate-500 truncate">{c.email}</p></li>))}</ul></div><div className="w-3/5 overflow-y-auto p-6">{editingContact ? <ContactForm key={typeof editingContact === 'object' ? editingContact.id : 'new'} contact={editingContact === 'new' ? null : editingContact} onSave={handleSave} onDelete={handleDelete} onCancel={() => setEditingContact(null)} /> : <div className="flex items-center justify-center h-full text-slate-500">Select or add a contact.</div>}</div></div></div></div>); };
const ContactForm: React.FC<{ contact: Contact | null; onSave: (data: Omit<Contact, 'id'|'createdAt'>) => void; onDelete: (id: string) => void; onCancel: () => void; }> = ({ contact, onSave, onDelete, onCancel }) => { const [formData, setFormData] = useState({ name: contact?.name || '', email: contact?.email || '', phone: contact?.phone || '', notes: contact?.notes || '' }); const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); onSave(formData); }; return (<form onSubmit={handleSubmit} className="space-y-4"><h3 className="text-lg font-bold">{contact ? 'Edit Contact' : 'New Contact'}</h3><input type="text" value={formData.name} onChange={e => setFormData(p => ({...p, name: e.target.value}))} placeholder="Full Name" required className="w-full h-11 px-4 border border-slate-300 rounded-xl"/> <input type="email" value={formData.email} onChange={e => setFormData(p => ({...p, email: e.target.value}))} placeholder="Email" className="w-full h-11 px-4 border border-slate-300 rounded-xl"/> <input type="tel" value={formData.phone} onChange={e => setFormData(p => ({...p, phone: e.target.value}))} placeholder="Phone" className="w-full h-11 px-4 border border-slate-300 rounded-xl"/><textarea value={formData.notes} onChange={e => setFormData(p => ({...p, notes: e.target.value}))} rows={4} placeholder="Notes..." className="w-full p-3 border border-slate-300 rounded-xl"></textarea><div className="flex justify-between items-center pt-2"><div>{!contact && <button type="button" onClick={onCancel} className="h-10 px-4 text-sm font-semibold hover:bg-slate-200 rounded-lg">Cancel</button>}{contact && <button type="button" onClick={() => onDelete(contact.id)} className="h-10 px-4 text-sm font-semibold text-red-600 hover:bg-red-100 rounded-lg">Delete</button>}</div><button type="submit" className="h-10 px-5 text-sm font-semibold text-white bg-indigo-600 hover:bg-indigo-700 rounded-lg">Save</button></div></form>); };
const GlobalYearCalendar: React.FC<{ year: number; missions: Mission[]; catalogs: WarCatalog[] }> = ({ year, missions, catalogs }) => { return (<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">{[...Array(12)].map((_, i) => (<MiniMonth key={i} year={year} month={i} missions={missions} catalogs={catalogs} />))}</div>); };
const MiniMonth: React.FC<{ year: number; month: number; missions: Mission[]; catalogs: WarCatalog[]; }> = ({ year, month, missions, catalogs }) => { const getCatalogColor = (id: string | null) => catalogs.find(c => c.id === id)?.color || 'bg-slate-500'; const monthDate = new Date(year, month, 1); const daysInMonth = new Date(year, month + 1, 0).getDate(); const firstDayIndex = monthDate.getDay(); const days = [...Array(firstDayIndex).fill(null), ...Array.from({ length: daysInMonth }, (_, k) => k + 1)]; return (<div className="bg-white p-3 rounded-xl border border-slate-200"><h4 className="font-bold text-base text-center mb-2">{monthDate.toLocaleString('default', { month: 'long' })}</h4><div className="grid grid-cols-7 text-xs text-center">{['S', 'M', 'T', 'W', 'T', 'F', 'S'].map(d => <div key={d} className="font-semibold text-slate-400 pb-1">{d}</div>)}{days.map((day, index) => { const dayDate = day ? new Date(year, month, day) : null; const missionsForDay = dayDate ? missions.filter(m => { const start = new Date(m.startDate); start.setHours(0, 0, 0, 0); const end = new Date(m.endDate); end.setHours(23, 59, 59, 999); return dayDate >= start && dayDate <= end; }) : []; const isToday = dayDate && new Date().toDateString() === dayDate.toDateString(); return (<div key={index} className="relative h-24 pt-1 text-center"><span className={`text-sm font-medium ${isToday ? 'bg-indigo-600 text-white rounded-full h-6 w-6 flex items-center justify-center mx-auto' : 'text-slate-700'}`}>{day}</span><div className="mt-1 space-y-0.5 overflow-hidden">{missionsForDay.slice(0, 2).map(m => (<div key={m.id} title={m.title} className={`w-full text-left text-[10px] font-bold px-1 py-0.5 rounded text-white truncate ${getCatalogColor(m.colorGroupId)}`}>{m.title}</div>))}{missionsForDay.length > 2 && (<div className="text-[10px] text-slate-500 font-semibold text-center mt-0.5">+ {missionsForDay.length - 2}</div>)}</div></div>); })}</div></div>); };
const GoalDetailView: React.FC<{ user: any; goal: WarGoal; missions: Mission[]; catalogs: WarCatalog[]; onBack: () => void; onUpdateGoal: (data: Partial<WarGoal>) => void; }> = ({ user, goal, missions, catalogs, onBack, onUpdateGoal }) => { const [activeTab, setActiveTab] = useState('actions'); const tabs = [{ id: 'actions', label: 'Action Plan', icon: RocketLaunchIcon }, { id: 'history', label: 'History', icon: SparklesIcon }]; return (<div className="h-screen w-full bg-slate-100 flex flex-col"><header className="h-[var(--topbar-h)] flex-shrink-0 bg-white/80 backdrop-blur-lg flex items-center justify-between px-4 sm:px-6 border-b border-slate-200"><button onClick={onBack} className="flex items-center gap-2 font-semibold text-slate-600 hover:text-slate-900"><ChevronLeftIcon className="w-5 h-5"/> Back to Planner</button></header><main className="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8"><div className="mb-6"><EditableField as="h2" value={goal.title} onSave={(val) => onUpdateGoal({ title: val })} className="text-3xl font-bold" placeholder="Goal Title" /><EditableField as="textarea" value={goal.description} onSave={(val) => onUpdateGoal({ description: val })} className="text-slate-600 mt-1" placeholder="Add a description..." /></div><div className="mt-8"><div className="border-b border-slate-200 mb-6"><nav className="-mb-px flex space-x-6 overflow-x-auto">{tabs.map(tab => (<button key={tab.id} onClick={() => setActiveTab(tab.id)} className={`flex-shrink-0 flex items-center gap-2 py-3 px-1 border-b-2 text-sm font-semibold ${activeTab === tab.id ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'}`}><tab.icon className="w-5 h-5"/>{tab.label}</button>))} </nav></div><div>{activeTab === 'actions' && <ActionPlanTab goal={goal} onUpdate={onUpdateGoal} />}{activeTab === 'history' && <HistoryTab user={user} goalId={goal.id} />}</div></div></main></div>);};
const EditableField: React.FC<{ value: string; onSave: (newValue: string) => void; as?: 'h2' | 'p' | 'textarea'; placeholder?: string; className?: string }> = ({ value, onSave, as = 'p', placeholder = "Click to edit", className = '' }) => { const [isEditing, setIsEditing] = useState(false); const [currentValue, setCurrentValue] = useState(value); const handleSave = () => { if (currentValue !== value) onSave(currentValue); setIsEditing(false); }; if (isEditing) { if (as === 'textarea') return <textarea value={currentValue} onChange={e => setCurrentValue(e.target.value)} onBlur={handleSave} autoFocus className={`bg-white border border-indigo-300 rounded-lg p-1 -m-1 w-full ${className}`} />; return <input type="text" value={currentValue} onChange={e => setCurrentValue(e.target.value)} onBlur={handleSave} onKeyDown={e => e.key === 'Enter' && handleSave()} autoFocus className={`bg-white border border-indigo-300 rounded-lg p-1 -m-1 w-full ${className}`} />; } const displayValue = value || placeholder; const displayClass = !value ? 'text-slate-400' : ''; return React.createElement(as, { onClick: () => setIsEditing(true), className: `cursor-pointer hover:bg-slate-100/80 p-1 -m-1 rounded-lg transition-colors ${className} ${displayClass}` }, displayValue); };
const ActionPlanTab: React.FC<{ goal: WarGoal; onUpdate: (data: Partial<WarGoal>) => void; }> = ({ goal, onUpdate }) => { const [subtasks, setSubtasks] = useState(goal.subtasks || []); const handleUpdate = () => onUpdate({ subtasks }); const handleChange = (index: number, newSubtask: Subtask) => { const newSubtasks = [...subtasks]; newSubtasks[index] = newSubtask; setSubtasks(newSubtasks); }; const addSubtask = () => setSubtasks([...subtasks, { id: `new_${Date.now()}`, title: '', isCompleted: false }]); const removeSubtask = (index: number) => { const newSubtasks = subtasks.filter((_, i) => i !== index); setSubtasks(newSubtasks); onUpdate({ subtasks: newSubtasks }); }; return (<div className="bg-white border border-slate-200 rounded-2xl p-6"><h3 className="text-xl font-bold mb-4">Action Plan</h3><div className="space-y-3">{subtasks.map((st, i) => (<div key={st.id} className={`flex items-center gap-3 group ${st.isCompleted ? 'opacity-60' : ''}`}><input type="checkbox" checked={st.isCompleted} onChange={() => { handleChange(i, {...st, isCompleted: !st.isCompleted }); handleUpdate(); }} className="h-5 w-5 rounded border-slate-300 text-indigo-600 focus:ring-indigo-500"/><input type="text" value={st.title} onChange={e => handleChange(i, {...st, title: e.target.value})} onBlur={handleUpdate} className={`flex-grow p-2 border rounded-lg bg-transparent focus:bg-white focus:border-indigo-300 ${st.isCompleted ? 'line-through text-slate-500' : ''} border-transparent hover:border-slate-200`} placeholder="Describe action..."/><button onClick={() => removeSubtask(i)} className="opacity-0 group-hover:opacity-100 text-slate-400 hover:text-red-600"><TrashIcon className="w-5 h-5" /></button></div>))}</div><button onClick={addSubtask} className="mt-4 flex items-center gap-2 text-indigo-600 font-semibold hover:text-indigo-800"><PlusCircleIcon className="w-5 h-5"/> Add Action</button></div>); };
const HistoryTab: React.FC<{ user: any; goalId: string; }> = ({ user, goalId }) => { const [history, setHistory] = useState<HistoryEntry[]>([]); const [newEntryText, setNewEntryText] = useState(''); const [newEntryType, setNewEntryType] = useState<'success' | 'learning'>('success'); const historyCollection = useMemo(() => collection(db, 'users', user.uid, 'warGoals', goalId, 'history'), [user, goalId]); useEffect(() => { const q = query(historyCollection, orderBy('createdAt', 'desc')); const unsub = onSnapshot(q, snapshot => setHistory(snapshot.docs.map(d => processFirestoreData<HistoryEntry>(d)))); return unsub; }, [historyCollection]); const handleAddEntry = async (e: React.FormEvent) => { e.preventDefault(); if (newEntryText.trim()) await addDoc(historyCollection, { goalId, text: newEntryText, type: newEntryType, createdAt: serverTimestamp() }); setNewEntryText(''); }; return (<div className="bg-white border border-slate-200 rounded-2xl"><div className="p-6"><h3 className="text-xl font-bold mb-4">Goal History</h3><form onSubmit={handleAddEntry} className="flex gap-2 items-start"><textarea value={newEntryText} onChange={e => setNewEntryText(e.target.value)} placeholder="Document a success or learning..." rows={2} className="flex-grow p-2 border border-slate-300 rounded-lg bg-white focus:ring-indigo-500"></textarea><div className="flex flex-col gap-2"><div className="flex bg-slate-100 rounded-lg p-0.5"><button type="button" onClick={() => setNewEntryType('success')} className={`px-2 py-1 rounded-md text-sm font-semibold flex items-center gap-1 ${newEntryType === 'success' ? 'bg-white shadow' : ''}`}><SparklesIcon className="w-4 h-4 text-green-500"/> Success</button><button type="button" onClick={() => setNewEntryType('learning')} className={`px-2 py-1 rounded-md text-sm font-semibold flex items-center gap-1 ${newEntryType === 'learning' ? 'bg-white shadow' : ''}`}><LightBulbIcon className="w-4 h-4 text-amber-500"/> Learning</button></div><button type="submit" className="h-9 w-full bg-indigo-600 text-white font-semibold rounded-lg text-sm hover:bg-indigo-700">Add</button></div></form></div><div className="border-t border-slate-200 p-6 space-y-4">{history.map(entry => (<div key={entry.id} className="flex gap-4 items-start"><div className={`flex-shrink-0 h-9 w-9 rounded-full flex items-center justify-center ${entry.type === 'success' ? 'bg-green-100' : 'bg-amber-100'}`}>{entry.type === 'success' ? <SparklesIcon className="w-5 h-5 text-green-600" /> : <LightBulbIcon className="w-5 h-5 text-amber-600" />}</div><div><p className="text-slate-700">{entry.text}</p><p className="text-xs text-slate-400 mt-1">{new Date(entry.createdAt).toLocaleString()}</p></div></div>))}{history.length === 0 && <p className="text-slate-500 text-center py-8">No history recorded yet.</p>}</div></div>) };

export default WarPlanner;